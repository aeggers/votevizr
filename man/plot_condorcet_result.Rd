% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/condorcet_methods.R
\name{plot_condorcet_result}
\alias{plot_condorcet_result}
\title{Plot result of Condorcet election}
\usage{
plot_condorcet_result(
  result,
  add.fp.result = T,
  fp.result.col = "black",
  fp.result.cex = 1,
  secondary.line.col = "gray",
  secondary.line.lwd = 2,
  vertex.labels = c("A", "B", "C"),
  shading.cols = c("#E495A566", "#86B87566", "#7DB0DD66"),
  main = NULL,
  new = T,
  border = "black",
  space = 0.1,
  xlim = c(0, 1),
  ylim = c(0, sqrt(3/4)),
  draw.majority.tie.lines = F,
  in.cycle = "empty"
)
}
\arguments{
\item{result}{The result of the election to be plotted. There are three ways to specify a result:
\itemize{
\item As a vector of ballot counts/shares of length 6 or length 9.
If candidates are A, B, and C, then the components should be
listed as (length 6 case) \code{c(ab, ac, ba, bc, ca, cb)} or
(length 9 case) \code{c(ab, ac, ax, ba, bc, bx, ca, cb, cx)} where
\code{ab} indicates the count or share of ballots listing \code{a}
first and \code{b} second (implicitly \code{c} last) and
\code{ax} indicates the count of share of ballots listing \code{a}
first and no one second.
\item As a matrix with a row for each of the three valid first choices (e.g. A, B, C) and a column for each valid second choice (A, B, C, and X if incomplete ballots are permitted)
\item As a data frame in "long" format with the first and second columns identifying valid combinations of first and second choices (respectively) and a column of counts/shares} See documentation for \code{convert_result_to_vector_of_vote_shares()} for more detail on acceptable \code{result} input.}

\item{add.fp.result}{Include a dot for the observed shares of first-preferences, i.e. top rankings?}

\item{fp.result.col}{Color for first preference result.}

\item{fp.result.cex}{Size of first preference result.}

\item{secondary.line.col}{Color for guidelines.}

\item{secondary.line.lwd}{Line width of guidelines}

\item{vertex.labels}{Labels for the vertices, in order bottom-left, top, bottom-right.}

\item{shading.cols}{Colors for sharing first-preference win regions, in order bottom-left, top, bottom-right.}

\item{main}{Main title for the plot.}

\item{new}{Draw new plot? If F, adds to existing plot.
= T,}

\item{border}{Color of border of ternary diagram.}

\item{space}{How far from vertices to put labels? Default .1, where 1 is distance between bottom left and bottom right vertices.}

\item{xlim}{Allows to focus on one part of figure. These are in standard coordinates.}

\item{ylim}{Allows to focus on one part of figure. These are in standard coordinates.}

\item{draw.majority.tie.lines}{Draw majority tie lines for each pair of candidates.}

\item{in.cycle}{How should we fill in the cyclic region? Specify "empty", "kemeny", "A" (lower left candidate), "B" (top candidate), or "C" (lower right candidate).}
}
\description{
Given ballot counts/shares, represent the result of a three-candidate
Condorcet election on a ternary diagram. The dot shows the proportion of top ranks each candidate
received; the division of the triangle into win regions shows
the proportion of top ranks each candidate would need to win the election
(given the pattern of lower rankings).
}
\details{
A Condorcet method is one where voters rank candidates and, if there is a candidate who defeats all other candidates in pairwise competition, that candidate is the winner. (A defeats B in pairwise competition is A is ranked higher than B on a majority of ballots.) There may not be such a candidate: there could be a "Condorcet cycle" in which e.g. A defeats B, B defeats C, but C defeats A. There are several methods for choosing a winner in the event of such a cycle. For now the user can leave the cyclic region empty, fill it according to the Kemeny-Young method (the winner is the candidate with the smallest losing margin), or specify a candidate who wins in that region.
}
\examples{
result <- c(25, 6, 6,12, 15, 10)
plot_condorcet_result(result, in.cycle = "empty")
plot_condorcet_result(result, in.cycle = "kemeny")
plot_condorcet_result(result, in.cycle = "A")
plot_condorcet_result(result, in.cycle = "A", draw.majority.tie.lines = T)
}
